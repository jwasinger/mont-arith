package arith

import (
	"errors"
	"math/bits"
	"unsafe"
)

func SubMod8000(out_bytes, x_bytes, y_bytes []byte, ctx *MontArithContext) error {
	x := (*[125]uint64)(unsafe.Pointer(&x_bytes[0]))[:]
	y := (*[125]uint64)(unsafe.Pointer(&y_bytes[0]))[:]
	z := (*[125]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[125]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]

	var c, c1 uint64
	tmp := [125]uint64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	if x[124] >= mod[124] || y[124] >= mod[124] {
		panic(errors.New("x/y must be smaller than modulus"))
	}
	tmp[0], c = bits.Sub64(x[0], y[0], 0)
	tmp[1], c = bits.Sub64(x[1], y[1], c)
	tmp[2], c = bits.Sub64(x[2], y[2], c)
	tmp[3], c = bits.Sub64(x[3], y[3], c)
	tmp[4], c = bits.Sub64(x[4], y[4], c)
	tmp[5], c = bits.Sub64(x[5], y[5], c)
	tmp[6], c = bits.Sub64(x[6], y[6], c)
	tmp[7], c = bits.Sub64(x[7], y[7], c)
	tmp[8], c = bits.Sub64(x[8], y[8], c)
	tmp[9], c = bits.Sub64(x[9], y[9], c)
	tmp[10], c = bits.Sub64(x[10], y[10], c)
	tmp[11], c = bits.Sub64(x[11], y[11], c)
	tmp[12], c = bits.Sub64(x[12], y[12], c)
	tmp[13], c = bits.Sub64(x[13], y[13], c)
	tmp[14], c = bits.Sub64(x[14], y[14], c)
	tmp[15], c = bits.Sub64(x[15], y[15], c)
	tmp[16], c = bits.Sub64(x[16], y[16], c)
	tmp[17], c = bits.Sub64(x[17], y[17], c)
	tmp[18], c = bits.Sub64(x[18], y[18], c)
	tmp[19], c = bits.Sub64(x[19], y[19], c)
	tmp[20], c = bits.Sub64(x[20], y[20], c)
	tmp[21], c = bits.Sub64(x[21], y[21], c)
	tmp[22], c = bits.Sub64(x[22], y[22], c)
	tmp[23], c = bits.Sub64(x[23], y[23], c)
	tmp[24], c = bits.Sub64(x[24], y[24], c)
	tmp[25], c = bits.Sub64(x[25], y[25], c)
	tmp[26], c = bits.Sub64(x[26], y[26], c)
	tmp[27], c = bits.Sub64(x[27], y[27], c)
	tmp[28], c = bits.Sub64(x[28], y[28], c)
	tmp[29], c = bits.Sub64(x[29], y[29], c)
	tmp[30], c = bits.Sub64(x[30], y[30], c)
	tmp[31], c = bits.Sub64(x[31], y[31], c)
	tmp[32], c = bits.Sub64(x[32], y[32], c)
	tmp[33], c = bits.Sub64(x[33], y[33], c)
	tmp[34], c = bits.Sub64(x[34], y[34], c)
	tmp[35], c = bits.Sub64(x[35], y[35], c)
	tmp[36], c = bits.Sub64(x[36], y[36], c)
	tmp[37], c = bits.Sub64(x[37], y[37], c)
	tmp[38], c = bits.Sub64(x[38], y[38], c)
	tmp[39], c = bits.Sub64(x[39], y[39], c)
	tmp[40], c = bits.Sub64(x[40], y[40], c)
	tmp[41], c = bits.Sub64(x[41], y[41], c)
	tmp[42], c = bits.Sub64(x[42], y[42], c)
	tmp[43], c = bits.Sub64(x[43], y[43], c)
	tmp[44], c = bits.Sub64(x[44], y[44], c)
	tmp[45], c = bits.Sub64(x[45], y[45], c)
	tmp[46], c = bits.Sub64(x[46], y[46], c)
	tmp[47], c = bits.Sub64(x[47], y[47], c)
	tmp[48], c = bits.Sub64(x[48], y[48], c)
	tmp[49], c = bits.Sub64(x[49], y[49], c)
	tmp[50], c = bits.Sub64(x[50], y[50], c)
	tmp[51], c = bits.Sub64(x[51], y[51], c)
	tmp[52], c = bits.Sub64(x[52], y[52], c)
	tmp[53], c = bits.Sub64(x[53], y[53], c)
	tmp[54], c = bits.Sub64(x[54], y[54], c)
	tmp[55], c = bits.Sub64(x[55], y[55], c)
	tmp[56], c = bits.Sub64(x[56], y[56], c)
	tmp[57], c = bits.Sub64(x[57], y[57], c)
	tmp[58], c = bits.Sub64(x[58], y[58], c)
	tmp[59], c = bits.Sub64(x[59], y[59], c)
	tmp[60], c = bits.Sub64(x[60], y[60], c)
	tmp[61], c = bits.Sub64(x[61], y[61], c)
	tmp[62], c = bits.Sub64(x[62], y[62], c)
	tmp[63], c = bits.Sub64(x[63], y[63], c)
	tmp[64], c = bits.Sub64(x[64], y[64], c)
	tmp[65], c = bits.Sub64(x[65], y[65], c)
	tmp[66], c = bits.Sub64(x[66], y[66], c)
	tmp[67], c = bits.Sub64(x[67], y[67], c)
	tmp[68], c = bits.Sub64(x[68], y[68], c)
	tmp[69], c = bits.Sub64(x[69], y[69], c)
	tmp[70], c = bits.Sub64(x[70], y[70], c)
	tmp[71], c = bits.Sub64(x[71], y[71], c)
	tmp[72], c = bits.Sub64(x[72], y[72], c)
	tmp[73], c = bits.Sub64(x[73], y[73], c)
	tmp[74], c = bits.Sub64(x[74], y[74], c)
	tmp[75], c = bits.Sub64(x[75], y[75], c)
	tmp[76], c = bits.Sub64(x[76], y[76], c)
	tmp[77], c = bits.Sub64(x[77], y[77], c)
	tmp[78], c = bits.Sub64(x[78], y[78], c)
	tmp[79], c = bits.Sub64(x[79], y[79], c)
	tmp[80], c = bits.Sub64(x[80], y[80], c)
	tmp[81], c = bits.Sub64(x[81], y[81], c)
	tmp[82], c = bits.Sub64(x[82], y[82], c)
	tmp[83], c = bits.Sub64(x[83], y[83], c)
	tmp[84], c = bits.Sub64(x[84], y[84], c)
	tmp[85], c = bits.Sub64(x[85], y[85], c)
	tmp[86], c = bits.Sub64(x[86], y[86], c)
	tmp[87], c = bits.Sub64(x[87], y[87], c)
	tmp[88], c = bits.Sub64(x[88], y[88], c)
	tmp[89], c = bits.Sub64(x[89], y[89], c)
	tmp[90], c = bits.Sub64(x[90], y[90], c)
	tmp[91], c = bits.Sub64(x[91], y[91], c)
	tmp[92], c = bits.Sub64(x[92], y[92], c)
	tmp[93], c = bits.Sub64(x[93], y[93], c)
	tmp[94], c = bits.Sub64(x[94], y[94], c)
	tmp[95], c = bits.Sub64(x[95], y[95], c)
	tmp[96], c = bits.Sub64(x[96], y[96], c)
	tmp[97], c = bits.Sub64(x[97], y[97], c)
	tmp[98], c = bits.Sub64(x[98], y[98], c)
	tmp[99], c = bits.Sub64(x[99], y[99], c)
	tmp[100], c = bits.Sub64(x[100], y[100], c)
	tmp[101], c = bits.Sub64(x[101], y[101], c)
	tmp[102], c = bits.Sub64(x[102], y[102], c)
	tmp[103], c = bits.Sub64(x[103], y[103], c)
	tmp[104], c = bits.Sub64(x[104], y[104], c)
	tmp[105], c = bits.Sub64(x[105], y[105], c)
	tmp[106], c = bits.Sub64(x[106], y[106], c)
	tmp[107], c = bits.Sub64(x[107], y[107], c)
	tmp[108], c = bits.Sub64(x[108], y[108], c)
	tmp[109], c = bits.Sub64(x[109], y[109], c)
	tmp[110], c = bits.Sub64(x[110], y[110], c)
	tmp[111], c = bits.Sub64(x[111], y[111], c)
	tmp[112], c = bits.Sub64(x[112], y[112], c)
	tmp[113], c = bits.Sub64(x[113], y[113], c)
	tmp[114], c = bits.Sub64(x[114], y[114], c)
	tmp[115], c = bits.Sub64(x[115], y[115], c)
	tmp[116], c = bits.Sub64(x[116], y[116], c)
	tmp[117], c = bits.Sub64(x[117], y[117], c)
	tmp[118], c = bits.Sub64(x[118], y[118], c)
	tmp[119], c = bits.Sub64(x[119], y[119], c)
	tmp[120], c = bits.Sub64(x[120], y[120], c)
	tmp[121], c = bits.Sub64(x[121], y[121], c)
	tmp[122], c = bits.Sub64(x[122], y[122], c)
	tmp[123], c = bits.Sub64(x[123], y[123], c)
	tmp[124], c = bits.Sub64(x[124], y[124], c)
	z[0], c1 = bits.Add64(tmp[0], mod[0], 0)
	z[1], c1 = bits.Add64(tmp[1], mod[1], c1)
	z[2], c1 = bits.Add64(tmp[2], mod[2], c1)
	z[3], c1 = bits.Add64(tmp[3], mod[3], c1)
	z[4], c1 = bits.Add64(tmp[4], mod[4], c1)
	z[5], c1 = bits.Add64(tmp[5], mod[5], c1)
	z[6], c1 = bits.Add64(tmp[6], mod[6], c1)
	z[7], c1 = bits.Add64(tmp[7], mod[7], c1)
	z[8], c1 = bits.Add64(tmp[8], mod[8], c1)
	z[9], c1 = bits.Add64(tmp[9], mod[9], c1)
	z[10], c1 = bits.Add64(tmp[10], mod[10], c1)
	z[11], c1 = bits.Add64(tmp[11], mod[11], c1)
	z[12], c1 = bits.Add64(tmp[12], mod[12], c1)
	z[13], c1 = bits.Add64(tmp[13], mod[13], c1)
	z[14], c1 = bits.Add64(tmp[14], mod[14], c1)
	z[15], c1 = bits.Add64(tmp[15], mod[15], c1)
	z[16], c1 = bits.Add64(tmp[16], mod[16], c1)
	z[17], c1 = bits.Add64(tmp[17], mod[17], c1)
	z[18], c1 = bits.Add64(tmp[18], mod[18], c1)
	z[19], c1 = bits.Add64(tmp[19], mod[19], c1)
	z[20], c1 = bits.Add64(tmp[20], mod[20], c1)
	z[21], c1 = bits.Add64(tmp[21], mod[21], c1)
	z[22], c1 = bits.Add64(tmp[22], mod[22], c1)
	z[23], c1 = bits.Add64(tmp[23], mod[23], c1)
	z[24], c1 = bits.Add64(tmp[24], mod[24], c1)
	z[25], c1 = bits.Add64(tmp[25], mod[25], c1)
	z[26], c1 = bits.Add64(tmp[26], mod[26], c1)
	z[27], c1 = bits.Add64(tmp[27], mod[27], c1)
	z[28], c1 = bits.Add64(tmp[28], mod[28], c1)
	z[29], c1 = bits.Add64(tmp[29], mod[29], c1)
	z[30], c1 = bits.Add64(tmp[30], mod[30], c1)
	z[31], c1 = bits.Add64(tmp[31], mod[31], c1)
	z[32], c1 = bits.Add64(tmp[32], mod[32], c1)
	z[33], c1 = bits.Add64(tmp[33], mod[33], c1)
	z[34], c1 = bits.Add64(tmp[34], mod[34], c1)
	z[35], c1 = bits.Add64(tmp[35], mod[35], c1)
	z[36], c1 = bits.Add64(tmp[36], mod[36], c1)
	z[37], c1 = bits.Add64(tmp[37], mod[37], c1)
	z[38], c1 = bits.Add64(tmp[38], mod[38], c1)
	z[39], c1 = bits.Add64(tmp[39], mod[39], c1)
	z[40], c1 = bits.Add64(tmp[40], mod[40], c1)
	z[41], c1 = bits.Add64(tmp[41], mod[41], c1)
	z[42], c1 = bits.Add64(tmp[42], mod[42], c1)
	z[43], c1 = bits.Add64(tmp[43], mod[43], c1)
	z[44], c1 = bits.Add64(tmp[44], mod[44], c1)
	z[45], c1 = bits.Add64(tmp[45], mod[45], c1)
	z[46], c1 = bits.Add64(tmp[46], mod[46], c1)
	z[47], c1 = bits.Add64(tmp[47], mod[47], c1)
	z[48], c1 = bits.Add64(tmp[48], mod[48], c1)
	z[49], c1 = bits.Add64(tmp[49], mod[49], c1)
	z[50], c1 = bits.Add64(tmp[50], mod[50], c1)
	z[51], c1 = bits.Add64(tmp[51], mod[51], c1)
	z[52], c1 = bits.Add64(tmp[52], mod[52], c1)
	z[53], c1 = bits.Add64(tmp[53], mod[53], c1)
	z[54], c1 = bits.Add64(tmp[54], mod[54], c1)
	z[55], c1 = bits.Add64(tmp[55], mod[55], c1)
	z[56], c1 = bits.Add64(tmp[56], mod[56], c1)
	z[57], c1 = bits.Add64(tmp[57], mod[57], c1)
	z[58], c1 = bits.Add64(tmp[58], mod[58], c1)
	z[59], c1 = bits.Add64(tmp[59], mod[59], c1)
	z[60], c1 = bits.Add64(tmp[60], mod[60], c1)
	z[61], c1 = bits.Add64(tmp[61], mod[61], c1)
	z[62], c1 = bits.Add64(tmp[62], mod[62], c1)
	z[63], c1 = bits.Add64(tmp[63], mod[63], c1)
	z[64], c1 = bits.Add64(tmp[64], mod[64], c1)
	z[65], c1 = bits.Add64(tmp[65], mod[65], c1)
	z[66], c1 = bits.Add64(tmp[66], mod[66], c1)
	z[67], c1 = bits.Add64(tmp[67], mod[67], c1)
	z[68], c1 = bits.Add64(tmp[68], mod[68], c1)
	z[69], c1 = bits.Add64(tmp[69], mod[69], c1)
	z[70], c1 = bits.Add64(tmp[70], mod[70], c1)
	z[71], c1 = bits.Add64(tmp[71], mod[71], c1)
	z[72], c1 = bits.Add64(tmp[72], mod[72], c1)
	z[73], c1 = bits.Add64(tmp[73], mod[73], c1)
	z[74], c1 = bits.Add64(tmp[74], mod[74], c1)
	z[75], c1 = bits.Add64(tmp[75], mod[75], c1)
	z[76], c1 = bits.Add64(tmp[76], mod[76], c1)
	z[77], c1 = bits.Add64(tmp[77], mod[77], c1)
	z[78], c1 = bits.Add64(tmp[78], mod[78], c1)
	z[79], c1 = bits.Add64(tmp[79], mod[79], c1)
	z[80], c1 = bits.Add64(tmp[80], mod[80], c1)
	z[81], c1 = bits.Add64(tmp[81], mod[81], c1)
	z[82], c1 = bits.Add64(tmp[82], mod[82], c1)
	z[83], c1 = bits.Add64(tmp[83], mod[83], c1)
	z[84], c1 = bits.Add64(tmp[84], mod[84], c1)
	z[85], c1 = bits.Add64(tmp[85], mod[85], c1)
	z[86], c1 = bits.Add64(tmp[86], mod[86], c1)
	z[87], c1 = bits.Add64(tmp[87], mod[87], c1)
	z[88], c1 = bits.Add64(tmp[88], mod[88], c1)
	z[89], c1 = bits.Add64(tmp[89], mod[89], c1)
	z[90], c1 = bits.Add64(tmp[90], mod[90], c1)
	z[91], c1 = bits.Add64(tmp[91], mod[91], c1)
	z[92], c1 = bits.Add64(tmp[92], mod[92], c1)
	z[93], c1 = bits.Add64(tmp[93], mod[93], c1)
	z[94], c1 = bits.Add64(tmp[94], mod[94], c1)
	z[95], c1 = bits.Add64(tmp[95], mod[95], c1)
	z[96], c1 = bits.Add64(tmp[96], mod[96], c1)
	z[97], c1 = bits.Add64(tmp[97], mod[97], c1)
	z[98], c1 = bits.Add64(tmp[98], mod[98], c1)
	z[99], c1 = bits.Add64(tmp[99], mod[99], c1)
	z[100], c1 = bits.Add64(tmp[100], mod[100], c1)
	z[101], c1 = bits.Add64(tmp[101], mod[101], c1)
	z[102], c1 = bits.Add64(tmp[102], mod[102], c1)
	z[103], c1 = bits.Add64(tmp[103], mod[103], c1)
	z[104], c1 = bits.Add64(tmp[104], mod[104], c1)
	z[105], c1 = bits.Add64(tmp[105], mod[105], c1)
	z[106], c1 = bits.Add64(tmp[106], mod[106], c1)
	z[107], c1 = bits.Add64(tmp[107], mod[107], c1)
	z[108], c1 = bits.Add64(tmp[108], mod[108], c1)
	z[109], c1 = bits.Add64(tmp[109], mod[109], c1)
	z[110], c1 = bits.Add64(tmp[110], mod[110], c1)
	z[111], c1 = bits.Add64(tmp[111], mod[111], c1)
	z[112], c1 = bits.Add64(tmp[112], mod[112], c1)
	z[113], c1 = bits.Add64(tmp[113], mod[113], c1)
	z[114], c1 = bits.Add64(tmp[114], mod[114], c1)
	z[115], c1 = bits.Add64(tmp[115], mod[115], c1)
	z[116], c1 = bits.Add64(tmp[116], mod[116], c1)
	z[117], c1 = bits.Add64(tmp[117], mod[117], c1)
	z[118], c1 = bits.Add64(tmp[118], mod[118], c1)
	z[119], c1 = bits.Add64(tmp[119], mod[119], c1)
	z[120], c1 = bits.Add64(tmp[120], mod[120], c1)
	z[121], c1 = bits.Add64(tmp[121], mod[121], c1)
	z[122], c1 = bits.Add64(tmp[122], mod[122], c1)
	z[123], c1 = bits.Add64(tmp[123], mod[123], c1)
	z[124], c1 = bits.Add64(tmp[124], mod[124], c1)

	if c == 0 {
		copy(z, tmp[:])
	}

	return nil
}
