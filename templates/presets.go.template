package arith

{{ $limbCount := .LimbCount}}
{{ $limbBits := .LimbBits}}
{{ $unrolledCutoff := 11}}

func NonUnrolledPreset()  ([]ModArithFunc, []ModArithFunc, []ModArithFunc) {
	return MulModMontImpls(), AddModNonUnrolledImpls(), SubModImpls()
}

func DefaultPreset() ([]ModArithFunc, []ModArithFunc, []ModArithFunc) {
	return MulModMontImpls(), AddModUnrolledImpls(), SubModImpls()
}

func AddModNonUnrolledImpls() []ModArithFunc {
	result := []ModArithFunc {
		AddMod64,
		{{- range $i := intRange 2 $limbCount}}
			AddModNonUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	return result
}

func AddModUnrolledImpls() []ModArithFunc {
	result := []ModArithFunc {
		AddMod64,
		{{- range $i := intRange 2 $limbCount}}
			AddModUnrolled{{mul $i $limbBits}},
		{{- end}}
	}

	return result
}

func SubModImpls() []ModArithFunc {
	result := []ModArithFunc {
		{{- range $i := intRange 1 $limbCount}}
			SubMod{{mul $i $limbBits}},
		{{- end}}
	}

	return result
}

func MulModMontImpls() []ModArithFunc {
	result := []ModArithFunc {
		{{- range $i := intRange 1 $limbCount}}
			{{if gte $i $unrolledCutoff}}
				MulModMontNonInterleaved,
			{{- else }}
				MulModMont{{mul $i $limbBits}},
			{{- end}}
		{{- end}}
	}

	return result
}
