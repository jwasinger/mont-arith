
{{ $limbCount := .LimbCount}}
{{ $lastLimb := sub $limbCount 1}}
{{ $limbBits := .LimbBits}}

func SubModUnrolled{{mul $limbCount $limbBits}}(out_bytes, x_bytes, y_bytes []byte, ctx *MontArithContext) (error) {
	x := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&x_bytes[0]))[:]
	y := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&y_bytes[0]))[:]
	z := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&out_bytes[0]))[:]
	mod := (*[{{$limbCount}}]uint64)(unsafe.Pointer(&ctx.Modulus[0]))[:]

	var c uint64 = 0
	var c1 uint64 = 0

	tmp := {{ makeZeroedLimbs $limbCount}}

	if x[0] >= mod[0] || y[0] >= mod[0] {
		panic(errors.New("x/y must be smaller than modulus"))
	}

	for i := 0; i < {{$limbCount}}; i++ {
		tmp[i], c = bits.Sub64(x[i], y[i], c)
	}

	for i := 0; i < {{$limbCount}}; i++ {
		z[i], c1 = bits.Add64(tmp[i], mod[i], c1)
	}

	if c == 0 {
		copy(z, tmp[:])
	}

	return nil
}

